# Main ansible role, consumes the yaml files from the profile directory
# The playbook will run the requested role in a loop
# that will iterate through each item in the yaml file
# very alpha - oder of ops errors in some cases, needs to be ported to python
- hosts: localhost
  vars:
    profile_json: "{{ lookup('file', '{{ profile_path }}' ) | from_yaml }}"
    ssh_key_path: "{{ ssh_key_path }}"
    synced_directory: "{{ synced_directory }}"
    debug: "{{ debug }}"
    squash: "{{ squash }}"
    ansible_user: "{{ ansible_user }}}"

  tasks:

  - name: Setting profile as fact
    set_fact:
      profile_json: "{{ profile_json }}"
      debug:
        msg: "{{ profile_json }}"

  - name: Setting the Debug boolean
    set_fact:
      debug: "{{ debug }}"

  - name: setting the user
    set_fact:
      ansible_user: "{{ ansible_user }}"

  - name: enable squash optimization
    set_fact:
      squash: "{{ squash }}"

  - name: Setting key as fact
    set_fact:
      ssh_key_path: "{{ ssh_key_path }}"

  - name: Finding the sync dir
    set_fact:
      synced_directory: "{{ synced_directory }}"

- hosts: webservers
  gather_facts: yes
  
  tasks:
  #- name: Gather Node Details
  #  debug: msg="{{ ansible_facts }}"

  - name: sync
    include_role:
      name: sync
    when:
      - hostvars['localhost'].profile_json['Sync'] is defined
      - (hostvars['localhost'].profile_json['Sync']|length>0)

  - name: files
    include_role:
      name: files
    when:
      - hostvars['localhost'].profile_json['Files'] is defined
      - (hostvars['localhost'].profile_json['Files']|length>0)

  - name: groups
    include_role:
      name: groups
    when:
      - hostvars['localhost'].profile_json['Groups'] is defined
      - (hostvars['localhost'].profile_json['Groups']|length>0)

  - name: users
    include_role:
      name: users
    when:
      - hostvars['localhost'].profile_json['Users'] is defined
      - (hostvars['localhost'].profile_json['Users']|length>0)

  - name: Apt_keys
    include_role:
      name: apt_keys
    when:
      - ansible_facts['pkg_mgr'] == "apt"
      - hostvars['localhost'].profile_json['Apt_Keys'] is defined
      - (hostvars['localhost'].profile_json['Apt_Keys']|length>0)

  - name: Apt_Repos
    include_role:
      name: apt_repos
    when:
      - ansible_facts['pkg_mgr'] == "apt"
      - hostvars['localhost'].profile_json['Apt_Repos'] is defined
      - (hostvars['localhost'].profile_json['Apt_Repos']|length>0)

  - name: package_update
    include_role:
      name: package_update
    when:
      - ansible_facts['pkg_mgr'] == "apt"
      - hostvars['localhost'].profile_json['Package_Update'] is defined
      - (hostvars['localhost'].profile_json['Package_Update']|length>0)

  - name: package_upgrade
    include_role:
      name: package_upgrade
    when:
      - ansible_facts['pkg_mgr'] == "apt"
      - hostvars['localhost'].profile_json['Kernel_Upgrade'] is defined
      - (hostvars['localhost'].profile_json['Kernel_Upgrade']|length>0)

  - name: run scripts
    include_role:
      name: scripts
    when:
      - hostvars['localhost'].profile_json['Scripts'] is defined
      - (hostvars['localhost'].profile_json['Scripts']|length>0)

  - name: path
    include_role:
      name: path
    when:
      - hostvars['localhost'].profile_json['Path'] is defined
      - (hostvars['localhost'].profile_json['Path']|length>0)

  - name: download items
    include_role:
      name: downloads
    when:
      - hostvars['localhost'].profile_json['Downloads'] is defined
      - (hostvars['localhost'].profile_json['Downloads']|length>0)

  - name: run commands
    include_role:
      name: commands
    when:
      - hostvars['localhost'].profile_json['Commands'] is defined
      - (hostvars['localhost'].profile_json['Commands']|length>0)

# todo: since these should mostly not be dependancies, I want to look into caching or
# multi-sessioning these to mke the build faster - hence the free strat

- hosts: webservers
  gather_facts: no

  tasks:
  - name: git_clone
    include_role:
      name: git_clone
    when:
      - hostvars['localhost'].profile_json['Repos'] is defined
      - (hostvars['localhost'].profile_json['Repos']|length>0)

  - name: apt_pass1
    include_role:
      name: apt_pass1
    when:
      - ansible_facts['pkg_mgr'] == "apt"
      - hostvars['localhost'].profile_json['Apt_Pass_1'] is defined
      - (hostvars['localhost'].profile_json['Apt_Pass_1']|length>0)

  - name: brew
    include_role:
      name: brew
    when:
      - hostvars['localhost'].profile_json['Brew'] is defined
      - (hostvars['localhost'].profile_json['Brew']|length>0)

  - name: pip
    include_role:
      name: pip
    when:
      - hostvars['localhost'].profile_json['Pip'] is defined
      - (hostvars['localhost'].profile_json['Pip']|length>0)

  - name: snap
    include_role:
      name: snap
    when:
      - hostvars['localhost'].profile_json['Snap'] is defined
      - (hostvars['localhost'].profile_json['Snap']|length>0)
      - ansible_facts['distribution'] == "Ubuntu"

  - name: flatpack_remote
    include_role:
      name: flatpak_remote
    when:
      - hostvars['localhost'].profile_json['Flatpak_Remote'] is defined
      - (hostvars['localhost'].profile_json['Flatpak_Remote']|length>0)

  - name: flatpack
    include_role:
      name: flatpak
    when:
      - hostvars['localhost'].profile_json['Flatpak'] is defined
      - (hostvars['localhost'].profile_json['Flatpak']|length>0)

  - name: sqlite
    include_role:
      name: sqlite
    when:
      - hostvars['localhost'].profile_json['Sqlite'] is defined
      - (hostvars['localhost'].profile_json['Sqlite']|length>0)
